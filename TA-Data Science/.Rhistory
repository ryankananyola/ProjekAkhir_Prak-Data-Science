Konsumsi_Protein = input$protein
)
prediction <- predict(model, new_data)
output$prediction <- renderText({
paste("Prediksi Stunting 2018 untuk", input$kabupaten, "adalah", round(prediction, 2), "%")
})
# Membuat plot untuk membandingkan prediksi vs aktual
output$plot <- renderPlot({
ggplot(data = final_data_cleaned, aes(x = Konsumsi_Protein, y = Stunting_2018)) +
geom_point(color = "blue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(title = "Prediksi vs Aktual", x = "Konsumsi Protein", y = "Aktual Stunting") +
theme_minimal()
})
})
}
shinyApp(ui = ui, server = server)
# Hitung prediksi pada data uji
predictions <- predict(model, newdata = test_data)
# Hitung Mean Absolute Error (MAE)
MAE <- mean(abs(predictions - test_data$Stunting_2018))
# Hitung rata-rata nilai aktual dari data uji
mean_data <- mean(test_data$Stunting_2018)
# Hitung Percentage Error (PE)
error <- (MAE / mean_data) * 100
cat("Evaluasi Model:\n")
cat("Mean Absolute Error (MAE):", round(MAE, 2), "\n")
cat("Dalam Persen:", round(error, 2), "%\n")
library(dplyr)
library(ggplot2)
data_protein <- read.csv("1728551850.csv")
data_ikp <- read.csv("1729137831.csv")
data_stunting <- read.csv("m_kabkota.csv")
data_protein
data_ikp
data_stunting
data_ikp <- data_ikp %>%
mutate(Nama_Kabupaten = trimws(Nama_Kabupaten) %>% tolower()) %>%
filter(Tahun == 2018)
data_protein <- data_protein %>%
mutate(Kabupaten_Kota = gsub("Kabupaten ", "", Kabupaten_Kota) %>%
gsub("Kota ", "", .) %>%
trimws() %>% tolower())%>%
filter(Tahun == 2021)
data_stunting <- data_stunting %>%
mutate(KABKOTA = trimws(KABKOTA) %>% tolower())
data_protein
data_ikp
data_stunting
merge_stunting_protein <- merge(data_stunting, data_protein,
by.x = "KABKOTA", by.y = "Kabupaten_Kota",
all = TRUE)
final_data <- merge(merge_stunting_protein, data_ikp,
by.x = "KABKOTA", by.y = "Nama_Kabupaten",
all = TRUE)
final_data
# Pilih kolom
final_data_cleaned <- final_data %>%
select(KABKOTA, IKP, Konsumsi_Protein, PCT_STUNTING_2013, PCT_STUNTING_2018)
# Ganti nama kolom
final_data_cleaned <- final_data_cleaned %>%
rename(
Nama_Kabupaten = KABKOTA,
Indeks_Pangan = IKP,
Konsumsi_Protein = Konsumsi_Protein,
Stunting_2013 = PCT_STUNTING_2013,
Stunting_2018 = PCT_STUNTING_2018
)
final_data_cleaned <- final_data_cleaned %>%
select(-Stunting_2013)
# Periksa missing values di dataset
summary(final_data_cleaned)
sapply(final_data_cleaned, function(x) sum(is.na(x)))
# Hapus baris dengan NA
final_data_cleaned <- na.omit(final_data_cleaned)
final_data_cleaned
write.csv(final_data_cleaned, "data_cleaned.csv", row.names = FALSE)
ggplot(final_data_cleaned, aes(x = Stunting_2018)) +
geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
labs(title = "Distribusi Tingkat Stunting 2018", x = "Stunting (%)", y = "Frekuensi") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Konsumsi_Protein, y = Stunting_2018)) +
geom_point(color = "darkgreen", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Hubungan Konsumsi Protein dan Tingkat Stunting",
x = "Konsumsi Protein", y = "Tingkat Stunting (%)") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Indeks_Pangan, y = Stunting_2018)) +
geom_point(color = "darkblue", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "orange") +
labs(title = "Hubungan Indeks Ketahanan Pangan dan Tingkat Stunting",
x = "Indeks Ketahanan Pangan", y = "Tingkat Stunting (%)") +
theme_minimal()
library(caret)
set.seed(123)
train_index <- createDataPartition(final_data_cleaned$Stunting_2018, p = 0.7, list = FALSE)
train_data <- final_data_cleaned[train_index, ]
test_data <- final_data_cleaned[-train_index, ]
model <- lm(Stunting_2018 ~ Indeks_Pangan + Konsumsi_Protein, data = train_data)
summary(model)
# Hitung prediksi pada data uji
predictions <- predict(model, newdata = test_data)
# Hitung Mean Absolute Error (MAE)
MAE <- mean(abs(predictions - test_data$Stunting_2018))
# Hitung rata-rata nilai aktual dari data uji
mean_data <- mean(test_data$Stunting_2018)
# Hitung Percentage Error (PE)
error <- (MAE / mean_data) * 100
cat("Evaluasi Model:\n")
cat("Mean Absolute Error (MAE):", round(MAE, 2), "\n")
cat("Dalam Persen:", round(error, 2), "%\n")
ggplot(data = test_data, aes(x = predictions, y = Stunting_2018)) +
geom_point(color = "blue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(title = "Prediksi vs Aktual", x = "Prediksi Stunting", y = "Aktual Stunting") +
theme_minimal()
# Simpan model ke file
saveRDS(model, file = "model_regresi_stunting.rds")
library(shiny)
final_data_cleaned <- read.csv("data_cleaned.csv")
model <- readRDS("model_regresi_stunting.rds")
# UI
ui <- fluidPage(
titlePanel("Stunting Prediction Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("kabupaten", "Pilih Kabupaten/Kota:", choices = unique(final_data_cleaned$Nama_Kabupaten)),
numericInput("protein", "Konsumsi Protein:", value = 0, min = 0, max = 100),
numericInput("indeks_pangan", "Indeks Ketahanan Pangan:", value = 0, min = 0, max = 100),
actionButton("predict", "Prediksi Stunting 2018")
),
mainPanel(
textOutput("prediction"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
observeEvent(input$predict, {
selected_data <- final_data_cleaned %>%
filter(Nama_Kabupaten == input$kabupaten)
new_data <- data.frame(
Indeks_Pangan = input$indeks_pangan,
Konsumsi_Protein = input$protein
)
prediction <- predict(model, new_data)
output$prediction <- renderText({
paste("Prediksi Stunting 2018 untuk", input$kabupaten, "adalah", round(prediction, 2), "%")
})
# Membuat plot untuk membandingkan prediksi vs aktual
output$plot <- renderPlot({
ggplot(data = final_data_cleaned, aes(x = Konsumsi_Protein, y = Stunting_2018)) +
geom_point(color = "blue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(title = "Prediksi vs Aktual", x = "Konsumsi Protein", y = "Aktual Stunting") +
theme_minimal()
})
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(ggplot2)
data_protein <- read.csv("1728551850.csv")
data_ikp <- read.csv("1729137831.csv")
data_stunting <- read.csv("m_kabkota.csv")
data_protein
data_ikp
data_stunting
data_ikp <- data_ikp %>%
mutate(Nama_Kabupaten = trimws(Nama_Kabupaten) %>% tolower()) %>%
filter(Tahun == 2018)
data_protein <- data_protein %>%
mutate(Kabupaten_Kota = gsub("Kabupaten ", "", Kabupaten_Kota) %>%
gsub("Kota ", "", .) %>%
trimws() %>% tolower())%>%
filter(Tahun == 2021)
data_stunting <- data_stunting %>%
mutate(KABKOTA = trimws(KABKOTA) %>% tolower())
data_protein
data_ikp
data_stunting
merge_stunting_protein <- merge(data_stunting, data_protein,
by.x = "KABKOTA", by.y = "Kabupaten_Kota",
all = TRUE)
final_data <- merge(merge_stunting_protein, data_ikp,
by.x = "KABKOTA", by.y = "Nama_Kabupaten",
all = TRUE)
final_data
# Pilih kolom
final_data_cleaned <- final_data %>%
select(KABKOTA, IKP, Konsumsi_Protein, PCT_STUNTING_2013, PCT_STUNTING_2018)
# Ganti nama kolom
final_data_cleaned <- final_data_cleaned %>%
rename(
Nama_Kabupaten = KABKOTA,
Indeks_Pangan = IKP,
Konsumsi_Protein = Konsumsi_Protein,
Stunting_2013 = PCT_STUNTING_2013,
Stunting_2018 = PCT_STUNTING_2018
)
final_data_cleaned <- final_data_cleaned %>%
select(-Stunting_2013)
# Periksa missing values di dataset
summary(final_data_cleaned)
sapply(final_data_cleaned, function(x) sum(is.na(x)))
# Hapus baris dengan NA
final_data_cleaned <- na.omit(final_data_cleaned)
final_data_cleaned
write.csv(final_data_cleaned, "data_cleaned.csv", row.names = FALSE)
ggplot(final_data_cleaned, aes(x = Stunting_2018)) +
geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
labs(title = "Distribusi Tingkat Stunting 2018", x = "Stunting (%)", y = "Frekuensi") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Konsumsi_Protein, y = Stunting_2018)) +
geom_point(color = "darkgreen", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Hubungan Konsumsi Protein dan Tingkat Stunting",
x = "Konsumsi Protein", y = "Tingkat Stunting (%)") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Indeks_Pangan, y = Stunting_2018)) +
geom_point(color = "darkblue", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "orange") +
labs(title = "Hubungan Indeks Ketahanan Pangan dan Tingkat Stunting",
x = "Indeks Ketahanan Pangan", y = "Tingkat Stunting (%)") +
theme_minimal()
library(caret)
set.seed(123)
train_index <- createDataPartition(final_data_cleaned$Stunting_2018, p = 0.7, list = FALSE)
train_data <- final_data_cleaned[train_index, ]
test_data <- final_data_cleaned[-train_index, ]
model <- lm(Stunting_2018 ~ Indeks_Pangan + Konsumsi_Protein, data = train_data)
summary(model)
# Hitung prediksi pada data uji
predictions <- predict(model, newdata = test_data)
# Hitung Mean Absolute Error (MAE)
MAE <- mean(abs(predictions - test_data$Stunting_2018))
# Hitung rata-rata nilai aktual dari data uji
mean_data <- mean(test_data$Stunting_2018)
# Hitung Percentage Error (PE)
error <- (MAE / mean_data) * 100
cat("Evaluasi Model:\n")
cat("Mean Absolute Error (MAE):", round(MAE, 2), "\n")
cat("Dalam Persen:", round(error, 2), "%\n")
ggplot(data = test_data, aes(x = predictions, y = Stunting_2018)) +
geom_point(color = "blue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(title = "Prediksi vs Aktual", x = "Prediksi Stunting", y = "Aktual Stunting") +
theme_minimal()
# Simpan model ke file
saveRDS(model, file = "model_regresi_stunting.rds")
library(shiny)
final_data_cleaned <- read.csv("data_cleaned.csv")
model <- readRDS("model_regresi_stunting.rds")
# UI
ui <- fluidPage(
titlePanel("Stunting Prediction Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("kabupaten", "Pilih Kabupaten/Kota:", choices = unique(final_data_cleaned$Nama_Kabupaten)),
numericInput("protein", "Konsumsi Protein:", value = 0, min = 0, max = 100),
numericInput("indeks_pangan", "Indeks Ketahanan Pangan:", value = 0, min = 0, max = 100),
actionButton("predict", "Prediksi Stunting 2018")
),
mainPanel(
textOutput("prediction"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
observeEvent(input$predict, {
selected_data <- final_data_cleaned %>%
filter(Nama_Kabupaten == input$kabupaten)
new_data <- data.frame(
Indeks_Pangan = input$indeks_pangan,
Konsumsi_Protein = input$protein
)
prediction <- predict(model, new_data)
output$prediction <- renderText({
paste("Prediksi Stunting 2018 untuk", input$kabupaten, "adalah", round(prediction, 2), "%")
})
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(ggplot2)
data_protein <- read.csv("1728551850.csv")
data_ikp <- read.csv("1729137831.csv")
data_stunting <- read.csv("m_kabkota.csv")
data_protein
data_ikp
data_stunting
data_ikp <- data_ikp %>%
mutate(Nama_Kabupaten = trimws(Nama_Kabupaten) %>% tolower()) %>%
filter(Tahun == 2018)
data_protein <- data_protein %>%
mutate(Kabupaten_Kota = gsub("Kabupaten ", "", Kabupaten_Kota) %>%
gsub("Kota ", "", .) %>%
trimws() %>% tolower())%>%
filter(Tahun == 2021)
data_stunting <- data_stunting %>%
mutate(KABKOTA = trimws(KABKOTA) %>% tolower())
data_protein
data_ikp
data_stunting
merge_stunting_protein <- merge(data_stunting, data_protein,
by.x = "KABKOTA", by.y = "Kabupaten_Kota",
all = TRUE)
final_data <- merge(merge_stunting_protein, data_ikp,
by.x = "KABKOTA", by.y = "Nama_Kabupaten",
all = TRUE)
final_data
# Pilih kolom
final_data_cleaned <- final_data %>%
select(KABKOTA, IKP, Konsumsi_Protein, PCT_STUNTING_2013, PCT_STUNTING_2018)
# Ganti nama kolom
final_data_cleaned <- final_data_cleaned %>%
rename(
Nama_Kabupaten = KABKOTA,
Indeks_Pangan = IKP,
Konsumsi_Protein = Konsumsi_Protein,
Stunting_2013 = PCT_STUNTING_2013,
Stunting_2018 = PCT_STUNTING_2018
)
final_data_cleaned <- final_data_cleaned %>%
select(-Stunting_2013)
# Periksa missing values di dataset
summary(final_data_cleaned)
sapply(final_data_cleaned, function(x) sum(is.na(x)))
# Hapus baris dengan NA
final_data_cleaned <- na.omit(final_data_cleaned)
final_data_cleaned
write.csv(final_data_cleaned, "data_cleaned.csv", row.names = FALSE)
ggplot(final_data_cleaned, aes(x = Stunting_2018)) +
geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
labs(title = "Distribusi Tingkat Stunting 2018", x = "Stunting (%)", y = "Frekuensi") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Konsumsi_Protein, y = Stunting_2018)) +
geom_point(color = "darkgreen", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Hubungan Konsumsi Protein dan Tingkat Stunting",
x = "Konsumsi Protein", y = "Tingkat Stunting (%)") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Indeks_Pangan, y = Stunting_2018)) +
geom_point(color = "darkblue", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "orange") +
labs(title = "Hubungan Indeks Ketahanan Pangan dan Tingkat Stunting",
x = "Indeks Ketahanan Pangan", y = "Tingkat Stunting (%)") +
theme_minimal()
library(caret)
set.seed(123)
train_index <- createDataPartition(final_data_cleaned$Stunting_2018, p = 0.7, list = FALSE)
train_data <- final_data_cleaned[train_index, ]
test_data <- final_data_cleaned[-train_index, ]
model <- lm(Stunting_2018 ~ Indeks_Pangan + Konsumsi_Protein, data = train_data)
summary(model)
# Hitung prediksi pada data uji
predictions <- predict(model, newdata = test_data)
# Hitung Mean Absolute Error (MAE)
MAE <- mean(abs(predictions - test_data$Stunting_2018))
# Hitung rata-rata nilai aktual dari data uji
mean_data <- mean(test_data$Stunting_2018)
# Hitung Percentage Error (PE)
error <- (MAE / mean_data) * 100
cat("Evaluasi Model:\n")
cat("Mean Absolute Error (MAE):", round(MAE, 2), "\n")
cat("Dalam Persen:", round(error, 2), "%\n")
ggplot(data = test_data, aes(x = predictions, y = Stunting_2018)) +
geom_point(color = "blue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(title = "Prediksi vs Aktual", x = "Prediksi Stunting", y = "Aktual Stunting") +
theme_minimal()
# Simpan model ke file
saveRDS(model, file = "model_regresi_stunting.rds")
library(shiny)
final_data_cleaned <- read.csv("data_cleaned.csv")
model <- readRDS("model_regresi_stunting.rds")
# UI
ui <- fluidPage(
titlePanel("Stunting Prediction Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("kabupaten", "Pilih Kabupaten/Kota:", choices = unique(final_data_cleaned$Nama_Kabupaten)),
numericInput("protein", "Konsumsi Protein:", value = 0, min = 0, max = 100),
numericInput("indeks_pangan", "Indeks Ketahanan Pangan:", value = 0, min = 0, max = 100),
actionButton("predict", "Prediksi Stunting 2018")
),
mainPanel(
textOutput("prediction"),
plotOutput("plot")
)
)
)
server <- function(input, output) {
observeEvent(input$predict, {
selected_data <- final_data_cleaned %>%
filter(Nama_Kabupaten == input$kabupaten)
new_data <- data.frame(
Indeks_Pangan = input$indeks_pangan,
Konsumsi_Protein = input$protein
)
prediction <- predict(model, new_data)
output$prediction <- renderText({
paste("Prediksi Stunting 2018 untuk", input$kabupaten, "adalah", round(prediction, 2), "%")
})
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(ggplot2)
data_protein <- read.csv("1728551850.csv")
data_ikp <- read.csv("1729137831.csv")
data_stunting <- read.csv("m_kabkota.csv")
data_protein
data_ikp
data_stunting
data_ikp <- data_ikp %>%
mutate(Nama_Kabupaten = trimws(Nama_Kabupaten) %>% tolower()) %>%
filter(Tahun == 2018)
data_protein <- data_protein %>%
mutate(Kabupaten_Kota = gsub("Kabupaten ", "", Kabupaten_Kota) %>%
gsub("Kota ", "", .) %>%
trimws() %>% tolower())%>%
filter(Tahun == 2021)
data_stunting <- data_stunting %>%
mutate(KABKOTA = trimws(KABKOTA) %>% tolower())
data_protein
data_ikp
data_stunting
data_protein = read.csv("1728551850.csv")
data_ikp = read.csv("1729137831.csv")
data_stunting = read.csv("m_kabkota.csv")
data_protein
data_ikp
data_stunting
data_ikp = data_ikp %>%
mutate(Nama_Kabupaten = trimws(Nama_Kabupaten) %>% tolower()) %>%
filter(Tahun == 2018)
data_protein = data_protein %>%
mutate(Kabupaten_Kota = gsub("Kabupaten ", "", Kabupaten_Kota) %>%
gsub("Kota ", "", .) %>%
trimws() %>% tolower())%>%
filter(Tahun == 2021)
data_stunting = data_stunting %>%
mutate(KABKOTA = trimws(KABKOTA) %>% tolower())
data_protein
data_ikp
data_stunting
merge_stunting_protein = merge(data_stunting, data_protein,
by.x = "KABKOTA", by.y = "Kabupaten_Kota",
all = TRUE)
final_data = merge(merge_stunting_protein, data_ikp,
by.x = "KABKOTA", by.y = "Nama_Kabupaten",
all = TRUE)
final_data
# Pilih kolom
final_data_cleaned = final_data %>%
select(KABKOTA, IKP, Konsumsi_Protein, PCT_STUNTING_2013, PCT_STUNTING_2018)
# Ganti nama kolom
final_data_cleaned = final_data_cleaned %>%
rename(
Nama_Kabupaten = KABKOTA,
Indeks_Pangan = IKP,
Konsumsi_Protein = Konsumsi_Protein,
Stunting_2013 = PCT_STUNTING_2013,
Stunting_2018 = PCT_STUNTING_2018
)
final_data_cleaned = final_data_cleaned %>%
select(-Stunting_2013)
# Periksa missing values di dataset
summary(final_data_cleaned)
sapply(final_data_cleaned, function(x) sum(is.na(x)))
# Hapus baris dengan NA
final_data_cleaned = na.omit(final_data_cleaned)
final_data_cleaned
write.csv(final_data_cleaned, "data_cleaned.csv", row.names = FALSE)
ggplot(final_data_cleaned, aes(x = Stunting_2018)) +
geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
labs(title = "Distribusi Tingkat Stunting 2018", x = "Stunting (%)", y = "Frekuensi") +
theme_minimal()
merge_stunting_protein = merge(data_stunting, data_protein,
by.x = "KABKOTA", by.y = "Kabupaten_Kota",
all = TRUE)
final_data = merge(merge_stunting_protein, data_ikp,
by.x = "KABKOTA", by.y = "Nama_Kabupaten",
all = TRUE)
final_data
ggplot(final_data_cleaned, aes(x = Stunting_2018)) +
geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
labs(title = "Distribusi Tingkat Stunting 2018", x = "Stunting (%)", y = "Frekuensi") +
theme_minimal()
ggplot(final_data_cleaned,
aes(x = Konsumsi_Protein,
y = Stunting_2018)) +
geom_point(color = "darkgreen", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Hubungan Konsumsi Protein dan Tingkat Stunting",
x = "Konsumsi Protein", y = "Tingkat Stunting (%)") +
theme_minimal()
ggplot(final_data_cleaned, aes(x = Indeks_Pangan, y = Stunting_2018)) +
geom_point(color = "darkblue", alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "orange") +
labs(title = "Hubungan Indeks Ketahanan Pangan dan Tingkat Stunting",
x = "Indeks Ketahanan Pangan", y = "Tingkat Stunting (%)") +
theme_minimal()
library(caret)
set.seed(123)
train_index <- createDataPartition(final_data_cleaned$Stunting_2018, p = 0.7, list = FALSE)
train_data <- final_data_cleaned[train_index, ]
test_data <- final_data_cleaned[-train_index, ]
model <- lm(Stunting_2018 ~ Indeks_Pangan + Konsumsi_Protein, data = train_data)
summary(model)
